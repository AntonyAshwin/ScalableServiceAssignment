/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreatePlayer201Response;
import org.openapitools.model.CreatePlayerRequest;
import org.openapitools.model.GetPlayer200Response;
import org.openapitools.model.UpdatePlayerProgressRequest;
import org.openapitools.model.PlayerProgressResponse;
import org.openapitools.model.GetPlayerDetailsResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-01T14:56:16.342685+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "Players", description = "the Players API")
public interface PlayersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /players : Create a new player
     *
     * @param createPlayerRequest The player object that needs to be created. (optional)
     * @return Player created successfully (status code 201)
     *         or Invalid request body (status code 400)
     */
    @Operation(
        operationId = "createPlayer",
        summary = "Create a new player",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Player created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreatePlayer201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request body")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/players",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreatePlayer201Response> createPlayer(
        @Parameter(name = "CreatePlayerRequest", description = "The player object that needs to be created.") @Valid @RequestBody(required = false) CreatePlayerRequest createPlayerRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"playerId\" : \"player-12345\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /players/{playerId} : Retrieve player details
     *
     * @param playerId The unique identifier of the player. (required)
     * @return Player details retrieved successfully (status code 200)
     *         or Player not found (status code 404)
     */
    @Operation(
        operationId = "getPlayer",
        summary = "Retrieve player details",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Player details retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetPlayer200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Player not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players/{playerId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetPlayer200Response> getPlayer(
        @Parameter(name = "playerId", description = "The unique identifier of the player.", required = true, in = ParameterIn.PATH) @PathVariable("playerId") String playerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gameId\" : \"game-12345\", \"createdAt\" : \"2024-12-01T00:00:00Z\", \"name\" : \"John Doe\", \"email\" : \"john.doe@example.com\", \"playerId\" : \"player-12345\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /players/{playerId}/progress : Update player progress (e.g., levels, points, milestones)
     *
     * @param playerId The unique identifier of the player. (required)
     * @param updatePlayerProgressRequest The updated progress data for the player. (optional)
     * @return Player progress updated successfully (status code 200)
     *         or Invalid request body (status code 400)
     *         or Player not found (status code 404)
     */
    @Operation(
        operationId = "updatePlayerProgress",
        summary = "Update player progress (e.g., levels, points, milestones)",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Player progress updated successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request body"),
            @ApiResponse(responseCode = "404", description = "Player not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH ,
        value = "/players/{playerId}/progress",
        consumes = { "application/json" },
        produces = { "application/json" }
    )
    ResponseEntity<PlayerProgressResponse> updatePlayerProgress(
        @Parameter(name = "playerId", description = "The unique identifier of the player.", required = true, in = ParameterIn.PATH) @PathVariable("playerId") String playerId,
        @Parameter(name = "UpdatePlayerProgressRequest", description = "The updated progress data for the player.") @Valid @RequestBody UpdatePlayerProgressRequest updatePlayerProgressRequest
    );

    @Operation(
        operationId = "getPlayerProgress",
        summary = "Retrieve player progress (level, points, milestones)",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Player progress retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PlayerProgressResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Player not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players/{playerId}/progress",
        produces = { "application/json" }
    )
    ResponseEntity<PlayerProgressResponse> getPlayerProgress(
        @Parameter(name = "playerId", description = "The unique identifier of the player.", required = true, in = ParameterIn.PATH) @PathVariable("playerId") String playerId
    );

    @Operation(
        operationId = "getPlayerDetails",
        summary = "Retrieve player details by gameId and name",
        tags = { "Players" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Player details retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetPlayerDetailsResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Player not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/players/details",
        produces = { "application/json" }
    )
    ResponseEntity<GetPlayerDetailsResponse> getPlayerDetails(
        @Parameter(name = "gameId", description = "The ID of the game the player is registered for.", required = true, in = ParameterIn.QUERY) @RequestParam("gameId") String gameId,
        @Parameter(name = "name", description = "The name of the player.", required = true, in = ParameterIn.QUERY) @RequestParam("name") String name
    );

}
